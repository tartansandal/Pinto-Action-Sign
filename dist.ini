name = Pinto-Action-Sign
version = 0.001
liscence = Perl_5
main_module = lib/App/Pinto/Command/sign.pm

[GatherDir]         ; everything under top dir
[PruneCruft]        ; default stuff to skip
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those too

; file modifications
[OurPkgVersion]     ; add $VERSION = ... to all files
[PodWeaver]         ; generate Pod

; generated files
[License]           ; boilerplate license
[ReadmeFromPod]     ; from Pod (runs after PodWeaver)
[ReadmeAnyFromPod / ReadmePodInRoot]
type     = markdown
filename = README.md

; t tests
[Test::Compile]     ; make sure .pm files all compile
fake_home = 1       ; fakes $ENV{HOME} just in case

[Test::ReportPrereqs]
include = DBIx::Class
include = DBD::SQLite

; xt tests
[MetaTests]         ; xt/release/meta-yaml.t
[PodSyntaxTests]    ; xt/release/pod-syntax.t
[Test::Version]     ; xt/release/test-version.t

; metadata
[AutoPrereqs]       ; find prereqs from code

[MetaResources]
homepage        = https://metacpan.org/module/Pinto::Action::Clone
bugtracker.web  = https://github.com/tartansandal/Pinto/issues
repository.web  = https://github.com/tartansandal/Pinto
repository.url  = git://github.com/tartansandal/Pinto.git
repository.type = git

[MetaProvides::Package] ; add 'provides' to META files
meta_noindex = 1         ; respect prior no_index directives

[MetaYAML]               ; generate META.yml (v1.4)
[MetaJSON]               ; generate META.json (v2)

[ContributorsFromGit]

; manifest (after all generated files)
[Manifest]               ; create MANIFEST

; before release
[Git::Check]             ; ensure all files checked in
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated
[CheckExtraTests]        ; ensure xt/ tests pass
[TestRelease]            ; ensure t/ tests pass
[ConfirmRelease]         ; prompt before uploading

; releaser
[UploadToCPAN]           ; uploads to CPAN

; after release
[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)

[Git::Tag]          ; tag repo with custom tag
tag_format = release-%v

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual

[NextRelease]

[Git::Commit / Commit_Changes] ; commit Changes (for new dev)

[Git::Push]         ; push repo to remote
push_to = origin

